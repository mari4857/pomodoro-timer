{"version":3,"sources":["utils/duration/index.js","pomodoro/Timer.js","pomodoro/PlayPause.js","utils/class-names/index.js","pomodoro/FocusDuration.js","pomodoro/BreakDuration.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","Timer","props","timerDisplay","isTimerVisible","display","sessionTitle","isFocusTimer","sessionDuration","breakDuration","focusDuration","paused","isTimerRunning","style","className","data-testid","showTimeRemaining","height","role","aria-valuemin","aria-valuemax","aria-valuenow","percentComplete","width","PlayPause","aria-label","type","title","onClick","playPause","classNameToBoolean","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","disabled","stopSession","FocusDuration","decreaseFocusDuration","increaseFocusDuration","BreakDuration","decreaseBreakDuration","increaseBreakDuration","Pomodoro","useState","setIsTimerRunning","setFocusDuration","setBreakDuration","setIsFocusTimer","setIsTimerVisible","minutesRemaining","setMinutesRemaining","secondsRemaining","setSecondsRemaining","setPercentComplete","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","totalSeconds","updatePercentComplete","Audio","play","prevState","duration","max","min","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2261995f.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\n\nfunction Timer(props) {\n  const timerDisplay = props.isTimerVisible\n    ? { display: \"block\" }\n    : { display: \"none\" };\n  const sessionTitle = props.isFocusTimer ? \"On Break\" : \"Focusing\";\n  const sessionDuration = props.isFocusTimer\n    ? props.minutesToDuration(props.breakDuration)\n    : props.minutesToDuration(props.focusDuration);\n  const paused = !props.isTimerRunning ? <h3>PAUSED</h3> : null;\n\n  return (\n    <div style={timerDisplay}>\n      {/* TODO: This area should show only when a focus or break session is running or pauses */}\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n          <h2 data-testid=\"session-title\">\n            {sessionTitle} for {sessionDuration} minutes\n          </h2>\n          {/* TODO: Update message below to include time remaining in the current session */}\n          <p className=\"lead\" data-testid=\"session-sub-title\">\n            {props.showTimeRemaining()} remaining\n          </p>\n          {paused}\n        </div>\n      </div>\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          <div className=\"progress\" style={{ height: \"20px\" }}>\n            <div\n              className=\"progress-bar\"\n              role=\"progressbar\"\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n              aria-valuenow={props.percentComplete} // TODO: Increase aria-valuenow as elapsed time increases\n              style={{ width: `${props.percentComplete}%` }} // TODO: Increase width % as elapsed time increases\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Timer;\n","import React from \"react\";\nimport classNames from \"../utils/class-names\";\n\nfunction PlayPause(props) {\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <div\n          className=\"btn-group btn-group-lg mb-2\"\n          role=\"group\"\n          aria-label=\"Timer controls\"\n        >\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            data-testid=\"play-pause\"\n            title=\"Start or pause timer\"\n            onClick={props.playPause}\n          >\n            <span\n              className={classNames({\n                oi: true,\n                \"oi-media-play\": !props.isTimerRunning,\n                \"oi-media-pause\": props.isTimerRunning,\n              })}\n            />\n          </button>\n          {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            title=\"Stop the session\"\n            disabled={!props.isTimerRunning}\n            onClick={props.stopSession}\n          >\n            <span className=\"oi oi-media-stop\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default PlayPause;\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React from \"react\";\nimport { minutesToDuration } from \"../utils/duration\";\n\nfunction FocusDuration(props) {\n  return (\n    <div className=\"col\">\n      <div className=\"input-group input-group-lg\">\n        <span className=\"input-group-text\" data-testid=\"duration-focus\">\n          {/* TODO: Update this text to display the current focus session duration */}\n          Focus Duration: {minutesToDuration(props.focusDuration)}\n        </span>\n        <div className=\"input-group-append\">\n          {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            data-testid=\"decrease-focus\"\n            disabled={props.isTimerRunning}\n            onClick={props.decreaseFocusDuration}\n          >\n            <span className=\"oi oi-minus\" />\n          </button>\n          {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            data-testid=\"increase-focus\"\n            disabled={props.isTimerRunning}\n            onClick={props.increaseFocusDuration}\n          >\n            <span className=\"oi oi-plus\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default FocusDuration;\n","import React from \"react\";\nimport { minutesToDuration } from \"../utils/duration\";\n\nfunction BreakDuration(props) {\n  return (\n    <div className=\"col\">\n      <div className=\"float-right\">\n        <div className=\"input-group input-group-lg\">\n          <span className=\"input-group-text\" data-testid=\"duration-break\">\n            {/* TODO: Update this text to display the current break session duration */}\n            Break Duration: {minutesToDuration(props.breakDuration)}\n          </span>\n          <div className=\"input-group-append\">\n            {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"decrease-break\"\n              disabled={props.isTimerRunning}\n              onClick={props.decreaseBreakDuration}\n            >\n              <span className=\"oi oi-minus\" />\n            </button>\n            {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"increase-break\"\n              disabled={props.isTimerRunning}\n              onClick={props.increaseBreakDuration}\n            >\n              <span className=\"oi oi-plus\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default BreakDuration;\n","import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport Timer from \"./Timer\";\nimport PlayPause from \"./PlayPause\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  // const [activeSession, setActiveSession] = useState(initialSessionState);\n  const [isFocusTimer, setIsFocusTimer] = useState(false);\n  const [isTimerVisible, setIsTimerVisible] = useState(false);\n  const [minutesRemaining, setMinutesRemaining] = useState(25);\n  const [secondsRemaining, setSecondsRemaining] = useState(0);\n  const [percentComplete, setPercentComplete] = useState(0);\n\n  function toggleTimerType() {\n    setIsFocusTimer((prevState) => !prevState);\n    if (isFocusTimer === false) {\n      setMinutesRemaining(breakDuration);\n      setSecondsRemaining(0);\n    } else {\n      setMinutesRemaining(focusDuration);\n      setSecondsRemaining(0);\n    }\n  }\n\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n      updatePercentComplete();\n      if (secondsRemaining > 0) {\n        setSecondsRemaining(secondsRemaining - 1);\n      } else if (minutesRemaining > 0 && secondsRemaining === 0) {\n        setMinutesRemaining(minutesRemaining - 1);\n        setSecondsRemaining(59);\n      } else if (minutesRemaining === 0 && secondsRemaining === 0) {\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n        toggleTimerType();\n      }\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function updatePercentComplete() {\n    let totalSeconds;\n    if (isFocusTimer === false) {\n      totalSeconds = focusDuration * 60;\n    } else {\n      totalSeconds = breakDuration * 60;\n    }\n    const remainingTime =\n      totalSeconds - (minutesRemaining * 60 + secondsRemaining);\n    const percentComplete = (remainingTime / totalSeconds) * 100;\n    setPercentComplete(percentComplete);\n  }\n\n  function showTimeRemaining() {\n    if (secondsRemaining > 0 && secondsRemaining > 10) {\n      return `${minutesRemaining}:${secondsRemaining}`;\n    } else if (secondsRemaining > 0 && secondsRemaining <= 9) {\n      return `${minutesRemaining}:0${secondsRemaining}`;\n    } else {\n      return minutesToDuration(minutesRemaining);\n    }\n  }\n\n  function stopSession() {\n    setIsTimerVisible(false);\n    setIsTimerRunning(false);\n    setIsFocusTimer(false);\n    setFocusDuration(25);\n    setMinutesRemaining(25);\n    setSecondsRemaining(0);\n  }\n\n  function playPause() {\n    setIsTimerVisible(true);\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  function decreaseFocusDuration() {\n    const duration = Math.max(focusDuration - 5, 5);\n    setFocusDuration(duration);\n    setMinutesRemaining(duration);\n    setSecondsRemaining(0);\n  }\n\n  function increaseFocusDuration() {\n    const duration = Math.min(focusDuration + 5, 60);\n    setFocusDuration(duration);\n    setMinutesRemaining(duration);\n    setSecondsRemaining(0);\n  }\n\n  function decreaseBreakDuration() {\n    const duration = Math.max(breakDuration - 1, 1);\n    setBreakDuration(duration);\n  }\n\n  function increaseBreakDuration() {\n    const duration = Math.min(breakDuration + 1, 15);\n    setBreakDuration(duration);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row mb-5\">\n        <FocusDuration\n          focusDuration={focusDuration}\n          isTimerRunning={isTimerRunning}\n          decreaseFocusDuration={decreaseFocusDuration}\n          increaseFocusDuration={increaseFocusDuration}\n        />\n        <BreakDuration\n          breakDuration={breakDuration}\n          isTimerRunning={isTimerRunning}\n          decreaseBreakDuration={decreaseBreakDuration}\n          increaseBreakDuration={increaseBreakDuration}\n        />\n      </div>\n      <PlayPause\n        playPause={playPause}\n        isTimerRunning={isTimerRunning}\n        stopSession={stopSession}\n      />\n      <Timer\n        isTimerVisible={isTimerVisible}\n        isFocusTimer={isFocusTimer}\n        minutesToDuration={minutesToDuration}\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        showTimeRemaining={showTimeRemaining}\n        isTimerRunning={isTimerRunning}\n        percentComplete={percentComplete}\n      />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App vh-100 d-flex flex-column justify-content-center\">\n      <header className=\"App-header container mb-5\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}