{"ast":null,"code":"import React from\"react\";function Timer(props){var timerDisplay=props.isTimerVisible?{display:\"block\"}:{display:\"none\"};var sessionTitle=props.isFocusTimer?\"On Break\":\"Focusing\";var sessionDuration=props.isFocusTimer?props.minutesToDuration(props.breakDuration):props.minutesToDuration(props.focusDuration);var paused=!props.isTimerRunning?/*#__PURE__*/React.createElement(\"h3\",null,\"PAUSED\"):null;return/*#__PURE__*/React.createElement(\"div\",{style:timerDisplay},/*#__PURE__*/React.createElement(\"div\",{className:\"row mb-2\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col\"},/*#__PURE__*/React.createElement(\"h2\",{\"data-testid\":\"session-title\"},sessionTitle,\" for \",sessionDuration,\" minutes\"),/*#__PURE__*/React.createElement(\"p\",{className:\"lead\",\"data-testid\":\"session-sub-title\"},props.showTimeRemaining(),\" remaining\"),paused)),/*#__PURE__*/React.createElement(\"div\",{className:\"row mb-2\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col\"},/*#__PURE__*/React.createElement(\"div\",{className:\"progress\",style:{height:\"20px\"}},/*#__PURE__*/React.createElement(\"div\",{className:\"progress-bar\",role:\"progressbar\",\"aria-valuemin\":\"0\",\"aria-valuemax\":\"100\",\"aria-valuenow\":props.percentComplete// TODO: Increase aria-valuenow as elapsed time increases\n,style:{width:\"\".concat(props.percentComplete,\"%\")}// TODO: Increase width % as elapsed time increases\n})))));}export default Timer;","map":{"version":3,"sources":["/Users/mariana/Desktop/Projects/thinkful-2021/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Timer.js"],"names":["React","Timer","props","timerDisplay","isTimerVisible","display","sessionTitle","isFocusTimer","sessionDuration","minutesToDuration","breakDuration","focusDuration","paused","isTimerRunning","showTimeRemaining","height","percentComplete","width"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,QAASC,CAAAA,KAAT,CAAeC,KAAf,CAAsB,CACpB,GAAMC,CAAAA,YAAY,CAAGD,KAAK,CAACE,cAAN,CACjB,CAAEC,OAAO,CAAE,OAAX,CADiB,CAEjB,CAAEA,OAAO,CAAE,MAAX,CAFJ,CAGA,GAAMC,CAAAA,YAAY,CAAGJ,KAAK,CAACK,YAAN,CAAqB,UAArB,CAAkC,UAAvD,CACA,GAAMC,CAAAA,eAAe,CAAGN,KAAK,CAACK,YAAN,CACpBL,KAAK,CAACO,iBAAN,CAAwBP,KAAK,CAACQ,aAA9B,CADoB,CAEpBR,KAAK,CAACO,iBAAN,CAAwBP,KAAK,CAACS,aAA9B,CAFJ,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAACV,KAAK,CAACW,cAAP,cAAwB,uCAAxB,CAA0C,IAAzD,CAEA,mBACE,2BAAK,KAAK,CAAEV,YAAZ,eAEE,2BAAK,SAAS,CAAC,UAAf,eACE,2BAAK,SAAS,CAAC,KAAf,eAEE,0BAAI,cAAY,eAAhB,EACGG,YADH,SACsBE,eADtB,YAFF,cAME,yBAAG,SAAS,CAAC,MAAb,CAAoB,cAAY,mBAAhC,EACGN,KAAK,CAACY,iBAAN,EADH,cANF,CASGF,MATH,CADF,CAFF,cAeE,2BAAK,SAAS,CAAC,UAAf,eACE,2BAAK,SAAS,CAAC,KAAf,eACE,2BAAK,SAAS,CAAC,UAAf,CAA0B,KAAK,CAAE,CAAEG,MAAM,CAAE,MAAV,CAAjC,eACE,2BACE,SAAS,CAAC,cADZ,CAEE,IAAI,CAAC,aAFP,CAGE,gBAAc,GAHhB,CAIE,gBAAc,KAJhB,CAKE,gBAAeb,KAAK,CAACc,eAAiB;AALxC,CAME,KAAK,CAAE,CAAEC,KAAK,WAAKf,KAAK,CAACc,eAAX,KAAP,CAAwC;AANjD,EADF,CADF,CADF,CAfF,CADF,CAgCD,CAED,cAAef,CAAAA,KAAf","sourcesContent":["import React from \"react\";\n\nfunction Timer(props) {\n  const timerDisplay = props.isTimerVisible\n    ? { display: \"block\" }\n    : { display: \"none\" };\n  const sessionTitle = props.isFocusTimer ? \"On Break\" : \"Focusing\";\n  const sessionDuration = props.isFocusTimer\n    ? props.minutesToDuration(props.breakDuration)\n    : props.minutesToDuration(props.focusDuration);\n  const paused = !props.isTimerRunning ? <h3>PAUSED</h3> : null;\n\n  return (\n    <div style={timerDisplay}>\n      {/* TODO: This area should show only when a focus or break session is running or pauses */}\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n          <h2 data-testid=\"session-title\">\n            {sessionTitle} for {sessionDuration} minutes\n          </h2>\n          {/* TODO: Update message below to include time remaining in the current session */}\n          <p className=\"lead\" data-testid=\"session-sub-title\">\n            {props.showTimeRemaining()} remaining\n          </p>\n          {paused}\n        </div>\n      </div>\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          <div className=\"progress\" style={{ height: \"20px\" }}>\n            <div\n              className=\"progress-bar\"\n              role=\"progressbar\"\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n              aria-valuenow={props.percentComplete} // TODO: Increase aria-valuenow as elapsed time increases\n              style={{ width: `${props.percentComplete}%` }} // TODO: Increase width % as elapsed time increases\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Timer;\n"]},"metadata":{},"sourceType":"module"}