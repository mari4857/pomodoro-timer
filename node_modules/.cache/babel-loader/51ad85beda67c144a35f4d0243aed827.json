{"ast":null,"code":"var _jsxFileName = \"/Users/mariana/Desktop/Projects/thinkful-2021/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport Timer from \"./Timer\";\nimport PlayPause from \"./PlayPause\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5); // const [activeSession, setActiveSession] = useState(initialSessionState);\n\n  const [isFocusTimer, setIsFocusTimer] = useState(false);\n  const [isTimerVisible, setIsTimerVisible] = useState(false);\n  const [minutesRemaining, setMinutesRemaining] = useState(25);\n  const [secondsRemaining, setSecondsRemaining] = useState(0);\n  const [percentComplete, setPercentComplete] = useState(0);\n\n  function toggleTimerType() {\n    setIsFocusTimer(prevState => !prevState);\n\n    if (isFocusTimer === false) {\n      setMinutesRemaining(breakDuration);\n      setSecondsRemaining(0);\n    } else {\n      setMinutesRemaining(focusDuration);\n      setSecondsRemaining(0);\n    }\n  }\n\n  useInterval(() => {\n    // ToDo: Implement what should happen when the timer is running\n    updatePercentComplete();\n\n    if (secondsRemaining > 0) {\n      setSecondsRemaining(secondsRemaining - 1);\n    } else if (minutesRemaining > 0 && secondsRemaining === 0) {\n      setMinutesRemaining(minutesRemaining - 1);\n      setSecondsRemaining(59);\n    } else if (minutesRemaining === 0 && secondsRemaining === 0) {\n      new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n      toggleTimerType();\n    }\n  }, isTimerRunning ? 1000 : null);\n\n  function updatePercentComplete() {\n    let totalSeconds;\n\n    if (isFocusTimer === false) {\n      totalSeconds = focusDuration * 60;\n    } else {\n      totalSeconds = breakDuration * 60;\n    }\n\n    const remainingTime = totalSeconds - (minutesRemaining * 60 + secondsRemaining);\n    const percentComplete = remainingTime / totalSeconds * 100;\n    setPercentComplete(percentComplete);\n  }\n\n  function showTimeRemaining() {\n    if (secondsRemaining > 0) {\n      return `${minutesRemaining}:${secondsRemaining}`;\n    } else {\n      return minutesToDuration(minutesRemaining);\n    }\n  }\n\n  function stopSession() {\n    setIsTimerVisible(false);\n    setIsTimerRunning(false);\n    setIsFocusTimer(false);\n    setFocusDuration(25);\n    setMinutesRemaining(25);\n    setSecondsRemaining(0);\n  }\n\n  function playPause() {\n    setIsTimerVisible(true);\n    setIsTimerRunning(prevState => !prevState);\n  }\n\n  function decreaseFocusDuration() {\n    const duration = Math.max(focusDuration - 5, 5);\n    setFocusDuration(duration);\n    setMinutesRemaining(duration);\n    setSecondsRemaining(0);\n  }\n\n  function increaseFocusDuration() {\n    const duration = Math.min(focusDuration + 5, 60);\n    setFocusDuration(duration);\n    setMinutesRemaining(duration);\n    setSecondsRemaining(0);\n  }\n\n  function decreaseBreakDuration() {\n    const duration = Math.max(breakDuration - 1, 1);\n    setBreakDuration(duration);\n  }\n\n  function increaseBreakDuration() {\n    const duration = Math.min(breakDuration + 1, 15);\n    setBreakDuration(duration);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FocusDuration, {\n    focusDuration: focusDuration,\n    isTimerRunning: isTimerRunning,\n    decreaseFocusDuration: decreaseFocusDuration,\n    increaseFocusDuration: increaseFocusDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BreakDuration, {\n    breakDuration: breakDuration,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(PlayPause, {\n    playPause: playPause,\n    isTimerRunning: isTimerRunning,\n    stopSession: stopSession,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Timer, {\n    isTimerVisible: isTimerVisible,\n    isFocusTimer: isFocusTimer,\n    minutesToDuration: minutesToDuration,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    showTimeRemaining: showTimeRemaining,\n    isTimerRunning: isTimerRunning,\n    percentComplete: percentComplete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/mariana/Desktop/Projects/thinkful-2021/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","minutesToDuration","secondsToDuration","Timer","PlayPause","FocusDuration","BreakDuration","Pomodoro","isTimerRunning","setIsTimerRunning","focusDuration","setFocusDuration","breakDuration","setBreakDuration","isFocusTimer","setIsFocusTimer","isTimerVisible","setIsTimerVisible","minutesRemaining","setMinutesRemaining","secondsRemaining","setSecondsRemaining","percentComplete","setPercentComplete","toggleTimerType","prevState","updatePercentComplete","Audio","play","totalSeconds","remainingTime","showTimeRemaining","stopSession","playPause","decreaseFocusDuration","duration","Math","max","increaseFocusDuration","min","decreaseBreakDuration","increaseBreakDuration"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,SAASC,QAAT,GAAoB;AAClB;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACa,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAAC,CAAD,CAAlD,CAJkB,CAKlB;;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACiB,cAAD,EAAiBC,iBAAjB,IAAsClB,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACmB,gBAAD,EAAmBC,mBAAnB,IAA0CpB,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACqB,gBAAD,EAAmBC,mBAAnB,IAA0CtB,QAAQ,CAAC,CAAD,CAAxD;AACA,QAAM,CAACuB,eAAD,EAAkBC,kBAAlB,IAAwCxB,QAAQ,CAAC,CAAD,CAAtD;;AAEA,WAASyB,eAAT,GAA2B;AACzBT,IAAAA,eAAe,CAAEU,SAAD,IAAe,CAACA,SAAjB,CAAf;;AACA,QAAIX,YAAY,KAAK,KAArB,EAA4B;AAC1BK,MAAAA,mBAAmB,CAACP,aAAD,CAAnB;AACAS,MAAAA,mBAAmB,CAAC,CAAD,CAAnB;AACD,KAHD,MAGO;AACLF,MAAAA,mBAAmB,CAACT,aAAD,CAAnB;AACAW,MAAAA,mBAAmB,CAAC,CAAD,CAAnB;AACD;AACF;;AAEDrB,EAAAA,WAAW,CACT,MAAM;AACJ;AACA0B,IAAAA,qBAAqB;;AACrB,QAAIN,gBAAgB,GAAG,CAAvB,EAA0B;AACxBC,MAAAA,mBAAmB,CAACD,gBAAgB,GAAG,CAApB,CAAnB;AACD,KAFD,MAEO,IAAIF,gBAAgB,GAAG,CAAnB,IAAwBE,gBAAgB,KAAK,CAAjD,EAAoD;AACzDD,MAAAA,mBAAmB,CAACD,gBAAgB,GAAG,CAApB,CAAnB;AACAG,MAAAA,mBAAmB,CAAC,EAAD,CAAnB;AACD,KAHM,MAGA,IAAIH,gBAAgB,KAAK,CAArB,IAA0BE,gBAAgB,KAAK,CAAnD,EAAsD;AAC3D,UAAIO,KAAJ,CAAW,8CAAX,EAA0DC,IAA1D;AACAJ,MAAAA,eAAe;AAChB;AACF,GAbQ,EAcThB,cAAc,GAAG,IAAH,GAAU,IAdf,CAAX;;AAiBA,WAASkB,qBAAT,GAAiC;AAC/B,QAAIG,YAAJ;;AACA,QAAIf,YAAY,KAAK,KAArB,EAA4B;AAC1Be,MAAAA,YAAY,GAAGnB,aAAa,GAAG,EAA/B;AACD,KAFD,MAEO;AACLmB,MAAAA,YAAY,GAAGjB,aAAa,GAAG,EAA/B;AACD;;AACD,UAAMkB,aAAa,GACjBD,YAAY,IAAIX,gBAAgB,GAAG,EAAnB,GAAwBE,gBAA5B,CADd;AAEA,UAAME,eAAe,GAAIQ,aAAa,GAAGD,YAAjB,GAAiC,GAAzD;AACAN,IAAAA,kBAAkB,CAACD,eAAD,CAAlB;AACD;;AAED,WAASS,iBAAT,GAA6B;AAC3B,QAAIX,gBAAgB,GAAG,CAAvB,EAA0B;AACxB,aAAQ,GAAEF,gBAAiB,IAAGE,gBAAiB,EAA/C;AACD,KAFD,MAEO;AACL,aAAOnB,iBAAiB,CAACiB,gBAAD,CAAxB;AACD;AACF;;AAED,WAASc,WAAT,GAAuB;AACrBf,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAR,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAM,IAAAA,eAAe,CAAC,KAAD,CAAf;AACAJ,IAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACAQ,IAAAA,mBAAmB,CAAC,EAAD,CAAnB;AACAE,IAAAA,mBAAmB,CAAC,CAAD,CAAnB;AACD;;AAED,WAASY,SAAT,GAAqB;AACnBhB,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAR,IAAAA,iBAAiB,CAAEgB,SAAD,IAAe,CAACA,SAAjB,CAAjB;AACD;;AAED,WAASS,qBAAT,GAAiC;AAC/B,UAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAS3B,aAAa,GAAG,CAAzB,EAA4B,CAA5B,CAAjB;AACAC,IAAAA,gBAAgB,CAACwB,QAAD,CAAhB;AACAhB,IAAAA,mBAAmB,CAACgB,QAAD,CAAnB;AACAd,IAAAA,mBAAmB,CAAC,CAAD,CAAnB;AACD;;AAED,WAASiB,qBAAT,GAAiC;AAC/B,UAAMH,QAAQ,GAAGC,IAAI,CAACG,GAAL,CAAS7B,aAAa,GAAG,CAAzB,EAA4B,EAA5B,CAAjB;AACAC,IAAAA,gBAAgB,CAACwB,QAAD,CAAhB;AACAhB,IAAAA,mBAAmB,CAACgB,QAAD,CAAnB;AACAd,IAAAA,mBAAmB,CAAC,CAAD,CAAnB;AACD;;AAED,WAASmB,qBAAT,GAAiC;AAC/B,UAAML,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASzB,aAAa,GAAG,CAAzB,EAA4B,CAA5B,CAAjB;AACAC,IAAAA,gBAAgB,CAACsB,QAAD,CAAhB;AACD;;AAED,WAASM,qBAAT,GAAiC;AAC/B,UAAMN,QAAQ,GAAGC,IAAI,CAACG,GAAL,CAAS3B,aAAa,GAAG,CAAzB,EAA4B,EAA5B,CAAjB;AACAC,IAAAA,gBAAgB,CAACsB,QAAD,CAAhB;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AACE,IAAA,aAAa,EAAEzB,aADjB;AAEE,IAAA,cAAc,EAAEF,cAFlB;AAGE,IAAA,qBAAqB,EAAE0B,qBAHzB;AAIE,IAAA,qBAAqB,EAAEI,qBAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE,oBAAC,aAAD;AACE,IAAA,aAAa,EAAE1B,aADjB;AAEE,IAAA,cAAc,EAAEJ,cAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF,eAaE,oBAAC,SAAD;AACE,IAAA,SAAS,EAAEyB,SADb;AAEE,IAAA,cAAc,EAAEzB,cAFlB;AAGE,IAAA,WAAW,EAAEwB,WAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,eAkBE,oBAAC,KAAD;AACE,IAAA,cAAc,EAAEhB,cADlB;AAEE,IAAA,YAAY,EAAEF,YAFhB;AAGE,IAAA,iBAAiB,EAAEb,iBAHrB;AAIE,IAAA,aAAa,EAAES,aAJjB;AAKE,IAAA,aAAa,EAAEE,aALjB;AAME,IAAA,iBAAiB,EAAEmB,iBANrB;AAOE,IAAA,cAAc,EAAEvB,cAPlB;AAQE,IAAA,eAAe,EAAEc,eARnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBF,CADF;AA+BD;;AAED,eAAef,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport Timer from \"./Timer\";\nimport PlayPause from \"./PlayPause\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  // const [activeSession, setActiveSession] = useState(initialSessionState);\n  const [isFocusTimer, setIsFocusTimer] = useState(false);\n  const [isTimerVisible, setIsTimerVisible] = useState(false);\n  const [minutesRemaining, setMinutesRemaining] = useState(25);\n  const [secondsRemaining, setSecondsRemaining] = useState(0);\n  const [percentComplete, setPercentComplete] = useState(0);\n\n  function toggleTimerType() {\n    setIsFocusTimer((prevState) => !prevState);\n    if (isFocusTimer === false) {\n      setMinutesRemaining(breakDuration);\n      setSecondsRemaining(0);\n    } else {\n      setMinutesRemaining(focusDuration);\n      setSecondsRemaining(0);\n    }\n  }\n\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n      updatePercentComplete();\n      if (secondsRemaining > 0) {\n        setSecondsRemaining(secondsRemaining - 1);\n      } else if (minutesRemaining > 0 && secondsRemaining === 0) {\n        setMinutesRemaining(minutesRemaining - 1);\n        setSecondsRemaining(59);\n      } else if (minutesRemaining === 0 && secondsRemaining === 0) {\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n        toggleTimerType();\n      }\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function updatePercentComplete() {\n    let totalSeconds;\n    if (isFocusTimer === false) {\n      totalSeconds = focusDuration * 60;\n    } else {\n      totalSeconds = breakDuration * 60;\n    }\n    const remainingTime =\n      totalSeconds - (minutesRemaining * 60 + secondsRemaining);\n    const percentComplete = (remainingTime / totalSeconds) * 100;\n    setPercentComplete(percentComplete);\n  }\n\n  function showTimeRemaining() {\n    if (secondsRemaining > 0) {\n      return `${minutesRemaining}:${secondsRemaining}`;\n    } else {\n      return minutesToDuration(minutesRemaining);\n    }\n  }\n\n  function stopSession() {\n    setIsTimerVisible(false);\n    setIsTimerRunning(false);\n    setIsFocusTimer(false);\n    setFocusDuration(25);\n    setMinutesRemaining(25);\n    setSecondsRemaining(0);\n  }\n\n  function playPause() {\n    setIsTimerVisible(true);\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  function decreaseFocusDuration() {\n    const duration = Math.max(focusDuration - 5, 5);\n    setFocusDuration(duration);\n    setMinutesRemaining(duration);\n    setSecondsRemaining(0);\n  }\n\n  function increaseFocusDuration() {\n    const duration = Math.min(focusDuration + 5, 60);\n    setFocusDuration(duration);\n    setMinutesRemaining(duration);\n    setSecondsRemaining(0);\n  }\n\n  function decreaseBreakDuration() {\n    const duration = Math.max(breakDuration - 1, 1);\n    setBreakDuration(duration);\n  }\n\n  function increaseBreakDuration() {\n    const duration = Math.min(breakDuration + 1, 15);\n    setBreakDuration(duration);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row mb-5\">\n        <FocusDuration\n          focusDuration={focusDuration}\n          isTimerRunning={isTimerRunning}\n          decreaseFocusDuration={decreaseFocusDuration}\n          increaseFocusDuration={increaseFocusDuration}\n        />\n        <BreakDuration\n          breakDuration={breakDuration}\n          isTimerRunning={isTimerRunning}\n        />\n      </div>\n      <PlayPause\n        playPause={playPause}\n        isTimerRunning={isTimerRunning}\n        stopSession={stopSession}\n      />\n      <Timer\n        isTimerVisible={isTimerVisible}\n        isFocusTimer={isFocusTimer}\n        minutesToDuration={minutesToDuration}\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        showTimeRemaining={showTimeRemaining}\n        isTimerRunning={isTimerRunning}\n        percentComplete={percentComplete}\n      />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}